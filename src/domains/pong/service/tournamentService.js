import Tournament from '#domains/pong/model/Tournament.js';
import tournamentRepo from '#domains/pong/repo/tournamentRepo.js';
import Game from '#domains/pong/model/Game.js';
import gameRepo from '#domains/pong/repo/gameRepo.js';
import { gameService } from '#domains/pong/service/gameService.js';
import { GameStatus, TournamentStatus, TournamentType } from '@prisma/client';

export class TournamentService {
  constructor() {
    /** @type { Map<number, Tournament> } */
    this.tournaments = new Map(); // tournamentId -> Tournament
    this.tournamentInits = new Map();
    /** @type { Map<number, Game> } */
    this.activeTournaments = new Map(); // tournamentId -> tournament

    /** @type { Map<number, NodeJS.Timeout> } */
    this.tournamentIntervals = new Map(); // tournamentId -> intervalId
  }

  async newConnection(socket, tournamentId, playerId) {
    // TournamentIdÏóê Ìï¥ÎãπÌïòÎäî ÌÜ†ÎÑàÎ®ºÌä∏ Ï†ïÎ≥¥ Î°úÎìú
    const tournament = await this.getOrConstructTournament(tournamentId);

    // Ìï¥Îãπ ÌÜ†ÎÑàÎ®ºÌä∏Ïóê Ïú†Ï†Ä Ï∂îÍ∞Ä
    const player = { id: playerId, socket };
    tournament.addPlayer(player);

    // Ïú†Ï†ÄÍ∞Ä Î™®Îëê Ï†ëÏÜçÌïòÎ©¥ Í≤åÏûÑ ÏãúÏûë
    if (tournament.isFull()) {
      console.log('tournament start!!');
      this.start(tournamentId); // Tournament ÎÇ¥Î∂ÄÏóêÏÑú Game Í∞ùÏ≤¥ ÏÉùÏÑ± Î∞è this.startGame Ìò∏Ï∂ú Í∞ÄÎä•
    } else console.log('waiting players ...');
    return 'success';
  }

  // ÏÉàÎ°úÏö¥ Ïú†Ï†Ä Ï†ëÏÜç Ïãú ÌÜ†ÎÑàÎ®ºÌä∏ Î°úÎî© ÎèôÍ∏∞Ìôî Î≥¥Ïû•
  // Ï†ëÏÜç == ÎπÑÎèôÍ∏∞Ï†Å Ïù¥Î≤§Ìä∏
  // ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú ÏÉùÏÑ±Ïûê Ìò∏Ï∂ú Ïãú Ïó¨Îü¨ Í∞úÏùò Í∞ùÏ≤¥Í∞Ä ÏÉùÍ∏∏ Ïàò ÏûàÏùå
  async getOrConstructTournament(tournamentId) {
    // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú DBÏóêÏÑú ÌÜ†ÎÑàÎ®ºÌä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨ÏôÄ Í∞ùÏ≤¥Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨
    if (this.tournaments.has(tournamentId)) {
      return this.tournaments.get(tournamentId);
    }

    // ÏïÑÏßÅ Í∞ùÏ≤¥Î•º DBÏóêÏÑú Î∂àÎü¨Ïò§Îäî Ï§ëÏù∏ Í≤ΩÏö∞
    if (this.tournamentInits.has(tournamentId)) {
      return await this.tournamentInits.get(tournamentId);
    }

    // Í∞ùÏ≤¥Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏïÑ ÏÉàÎ°≠Í≤å ÏÉùÏÑ±Ìï¥Ïïº ÌïòÎäî Í≤ΩÏö∞
    const initPromise = this.initializeTournament(tournamentId);
    this.tournamentInits.set(tournamentId, initPromise);

    const tournament = await initPromise;
    this.tournaments.set(tournamentId, tournament);
    this.tournamentInits.delete(tournamentId);

    return tournament;
  }

  async initializeTournament(tournamentId) {
    const tournamentData = await tournamentRepo.findById(tournamentId);
    if (!tournamentData) {
      throw new Error(`ÌÜ†ÎÑàÎ®ºÌä∏ ${tournamentId}Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
    }

    return new Tournament(tournamentData);
  }

  addPlayer(tournament, socket, playerId) {
    const player = { id: playerId, socket };
    this.tournaments[tournamentId].addPlayer(player);
    // tournament.players.push(player);
    // tournament.activePlayers.push(player);
    return true;
  }

  async start(tournamentId) {
    console.log('Try to start Tournament!');

    const tournament = await this.getOrConstructTournament(tournamentId);

    // Í≤åÏûÑ ÏÉùÏÑ± Î∞è ÏãúÏûë
    const shuffled = tournament.getShuffledPlayer();
    while (shuffled.length >= 2) {
      const left = shuffled.pop();
      const right = shuffled.pop();

      const gameData = await gameRepo.createGame(tournamentId, left.id, right.id, 1, 1);
      const game = new Game(gameData.id, [left, right]);
      // const game = gameService.createGame();
      tournament.addGame(game);
      gameService.startGame(game);
    }

    // ÌÜ†ÎÑàÎ®ºÌä∏ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
    const intervalId = setInterval(async () => {
      const tournament = this.tournaments.get(tournamentId);
      const activeGames = tournament.getActiveGames();

      for (const game of activeGames) {
        if (game.isGameOver()) {
          tournament.eliminatePlayer(game.loser_id);
          tournament.removeGame(gameId);
        }
      }

      if (!tournament || tournament.isCompleted()) {
        clearInterval(intervalId);

        let type = tournament.type;
        let status = tournament.status;

        if (type === TournamentType.LAST_16) type = TournamentType.QUARTERFINAL;
        else if (type === TournamentType.QUARTERFINAL) type = TournamentType.SEMIFINAL;
        else if (type === TournamentType.SEMIFINAL) type = TournamentType.FINAL;
        else if (type === TournamentType.FINAL) status = TournamentStatus.COMPLETED;

        await tournamentRepo.updateTournament(tournamentId, type, status);

        if (status === TournamentStatus.COMPLETED) {
          console.log('üèÅ Tournament End!!!');
        } else {
          console.log(`üîÅ ${tournament.type} Round End!`);
          console.log(`üöÄ ${type} Round Start!`);
          tournament.updateType(type);
          this.start();
        }
      }
    }, 1000);
  }
}

export const tournamentService = new TournamentService();
