// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TournamentType {
  LAST_16
  QUARTERFINAL
  SEMIFINAL
  FINAL
}

enum TournamentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum LobbyStatus {
  PENDING
  STARTED
}

enum UserStatus {
  LOGGED_OUT
  LOGGED_IN
  PLAYING
}

model User {
  id            Int         @id @default(autoincrement())
  passwd        String?
  two_fa_secret String?
  username      String      @unique
  nickname      String      @unique
  profile_image String?
  refresh_token String?     @unique
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  status        UserStatus  @default(LOGGED_OUT)
  enabled       Boolean     @default(true)
  game_rating   Int         @default(1000)
  // Relations
  gamesAsPlayerOne Game[]       @relation("PlayerOne")
  gamesAsPlayerTwo Game[]       @relation("PlayerTwo")
  gamesAsWinner    Game[]       @relation("Winner")
  gamesAsLoser     Game[]       @relation("Loser")
  lobby_players    LobbyPlayer[]
}

model Tournament {
  id                Int             @id @default(autoincrement())
  tournament_type   TournamentType
  tournament_status TournamentStatus
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  enabled           Boolean         @default(true)
  // Relations
  games             Game[]
  lobbies           Lobby[]
}

model Game {
  id                Int          @id @default(autoincrement())
  tournament_id     Int
  player_one_id     Int
  player_two_id     Int
  player_one_score  Int?
  player_two_score  Int?
  winner_id         Int?
  loser_id          Int?
  play_time         Int?
  round             Int
  match             Int
  game_status       GameStatus
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  enabled           Boolean      @default(true)
  // Relations
  tournament        Tournament   @relation(fields: [tournament_id], references: [id])
  player_one        User         @relation("PlayerOne", fields: [player_one_id], references: [id])
  player_two        User         @relation("PlayerTwo", fields: [player_two_id], references: [id])
  winner            User?        @relation("Winner", fields: [winner_id], references: [id])
  loser             User?        @relation("Loser", fields: [loser_id], references: [id])
}

model Lobby {
  id            Int         @id @default(autoincrement())
  tournament_id Int
  max_player    Int
  lobby_status  LobbyStatus
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  enabled       Boolean     @default(true)
  // Relations
  tournament    Tournament  @relation(fields: [tournament_id], references: [id])
  lobby_players LobbyPlayer[]
}

model LobbyPlayer {
  id         Int       @id @default(autoincrement())
  lobby_id   Int
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  enabled    Boolean   @default(true)
  // Relations
  lobby      Lobby     @relation(fields: [lobby_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
}